@startuml
class Matrix4x4 <<struct>> {
    + m00 : float
    + m01 : float
    + m02 : float
    + m03 : float
    + m10 : float
    + m11 : float
    + m12 : float
    + m13 : float
    + m20 : float
    + m21 : float
    + m22 : float
    + m23 : float
    + m30 : float
    + m31 : float
    + m32 : float
    + m33 : float
    + Matrix4x4()
    + Matrix4x4(_matrix:float[,])
    + Matrix4x4(_m00:float, _m01:float, _m02:float, _m03:float, _m10:float, _m11:float, _m12:float, _m13:float, _m20:float, _m21:float, _m22:float, _m23:float, _m30:float, _m31:float, _m32:float, _m33:float)
    + Matrix4x4(_row0:Vector4, _row1:Vector4, _row2:Vector4, _row3:Vector4)
    + GetRow(_index:int) : Vector4
    + GetColumn(_index:int) : Vector4
    + Invert() : void
    + Transpose() : void
    + determinant : float <<get>>
    + {static} ScaleMatrix(_v:Vector3) : Matrix4x4
    + {static} TranslateMatrix(_v:Vector3) : Matrix4x4
    + {static} RotateMatrix(_q:Quaternion) : Matrix4x4
    + <<override>> GetHashCode() : int
    + <<override>> Equals(_other:object) : bool
    + Equals(_other:Matrix4x4) : bool
    + <<override>> ToString() : string
}
class "IEquatable`1"<T> {
}
"IEquatable`1" "<Matrix4x4>" <|-- Matrix4x4
Matrix4x4 --> "inverse" Matrix4x4
Matrix4x4 --> "transposed" Matrix4x4
Matrix4x4 --> "zero" Matrix4x4
Matrix4x4 --> "one" Matrix4x4
Matrix4x4 --> "identity" Matrix4x4
@enduml
