@startuml

class ExtensionMethods <<static>> {
    + {static} Map() : float
}

enum RenderOrder {
    Early = 0,
    Normal = 1,
    Late = 2
}

enum RenderFace {
    All = 0,
    Front = 1,
    Back = 2,
    None = 3
}

abstract class Component {
    + Initialize() : void
    
    + <<virtual>> Start() : void
    + <<virtual>> Update() : void
    + <<virtual>> Exit() : void
    
    gameObject : GameObject
}
Component --> GameObject

class Colour <<struct>> {
    + R, G, B, A : float
    
    + Colour red
    + Colour green
    + Colour blue
    + Colour white
    + Colour black
    + Colour yellow
    + Colour cyan
    + Colour magenta
    + Colour grey
    + Colour brown
    
    + Colour()
    
    + {static} RandomColour() : Colour
}

class Window {
    + Window()
    + Initialize() : void
    + Render() : void
    + Update() : void
    + Exit() : void
    
    + WindowResized : Action
    + HandleInput : Action
    
    + {static} <<readonly>> width : int
    + {static} <<readonly>> height : int
}
GameWindow <|-- Window

class GameObject {
    + GameObject()
    + AddComponent() : Component
    + RemoveComponentOfType() : void
    + RemoveAllComponentsOfType() : void
    + GetComponent() : T
    + GetComponents() : List<Component>
    
    + transform : Transform
}
GameObject o-> Transform

class Game {
    + <<unsafe>> Run() : void
    
    + InitCall : Action
    + UpdateCall : Action
    + LateUpdateCall : Action
    + EarlyRenderCall : Action
    + RenderCall : Action
    + LateRenderCall : Action
    + ExitCall : Action
}

class Shader {
    + Shader()
    + Bind() : void
    + Use() : void
    + Dispose() : void
    + GetUniformLocation() : int
    
    + Shader lit
    + Shader unlit
    + Shader test
}
IDisposable <|-- Shader

class Vertex <<struct>> {
    + Vertex()
    
    + vertexPosition : Vector3
    + vertexColour : Colour
    + UV : Vector2
    + normal : Vector3
    + tangent : Vector3
    + biTangent : Vector3
}
Vertex -up-> Vector3
Vertex -up-> Vector2
Vertex -down-> Colour

class MeshRenderer {
    + MeshRenderer()
    + <<override>> <<unsafe>> Start() : void
    + <<override>> Exit() : void
    
    + material : material
    + mesh : Mesh
    + renderOrder : RenderOrder
}
Component <|-right- MeshRenderer
MeshRenderer -down-> Material
MeshRenderer -right-> Mesh
MeshRenderer o-up-> RenderOrder

class Model {
    + material : Material
    + mesh : Mesh
    
    + Model()
    
    + {static} Load() : Model
}
Model -up-> Mesh
Model -left-> Material

enum TextureFilter {
    Linear,
    Point,
}

class Texture2D {
    + name : string
    + generateMipmap : bool
    
    + textureFilter : TextureFilter
    + wrapMode : TextureWrapMode
    
    + Texture2D()
    + Bind() : void
    + Use() : void
}
Texture2D --> TextureFilter

class Primitives <<static>> {
    {static} Primitives()
    
    + capsule : Mesh
    + cube : Mesh
    + cylinder : Mesh
    + quad : Mesh
    + sphere : Mesh
}
Primitives --> Mesh

class Mesh {
    + Mesh()
    + <<unsafe>> Initialize() : void
    + Render() : void
    + RecalculateNormals() : void
}

class Material {
    + Material()
    + <<virtual>> Initialize() : void
    + <<virtual>> Render() : void
    + Dispose() : void
    
    + SetInt() : void
    + SetFloat() : void
    + SetBool() : void
    + SetVector2() : void
    + SetVector3() : void
    + SetVector4() : void
    + SetVector2Int() : void
    + SetVector3Int() : void
    + SetColour() : void
    + SetQuaternion() : void
    + <<unsafe>> SetMatrix4x4() : void
    + SetTexture2D() : void
    
    + renderFace : RenderFace
}
Material o-left-> RenderFace

class Camera {
    + fovY : float
    + camSize : float
    + nearPlane : float
    + farPlane : float
    
    + activeCamera : Camera
    
    + projectionType : ProjectionType
    + mainColour : Colour
    + secondColour : Colour
    
    + ViewMatrix : Matrix4x4
    + ProjectionMatrix : Matrix4x4
    
    + Camera()
}
GameObject <|-- Camera
Camera --> Matrix4x4
Camera o-> Colour
Camera +-right-> ProjectionType
Camera +-left-> BackgroundType

enum ProjectionType {
    Perspective = 0,
    Orthographic = 1
}

enum BackgroundType {
    SolidColour = 1,
    Skybox = 2
}

class CameraController {
    + rotateSpeed : float
    + moveSpeed : float
    + <<override>> Start() : void
    + <<override>> Update() : void
}
Component <|-left- CameraController

class Transform {
    + Rotate() : void
    + RotateAround() : void
    
    + position : Vector3
    + rotation : Quaternion
    + scale : Vector3
    
    + objectMatrix : Matrix4x4
    
    + right : Transform
    + forward : Transform
    + up : Transform
}
Component <|-- Transform
Transform o-> Vector3
Transform o-> Quaternion
Transform --> Matrix4x4

class Vector2 <<struct>> {
    + x, y : float
    
    + magnitude : float <<get>>
    + squaredMagnitude : float <<get>>
    
    + normalized : Vector2
    + zero : Vector2
    + one : Vector2
    + right : Vector2
    + left : Vector2
    + up : Vector2
    + down : Vector2
    
    + Vector2()
    
    + Normalize() : void
    + Rotate() : void
    
    + {static} Distance() : float
    + {static} Dot() : float
    + {static} Cross() : float
    + {static} Angle() : float
    + {static} RandomVector() : Vector2
}

class Vector2Int <<struct>> {
    + x, y : int
    
    + magnitude : float <<get>>
    + normalized : Vector2Int
    
    + zero : Vector2Int
    + one : Vector2Int
    + right : Vector2Int
    + left : Vector2Int
    + up : Vector2Int
    + down : Vector2Int
    
    + Vector2Int()
    + Normalize() : void
    + Rotate() : void
    
    + {static} Distance() : float
    + {static} Dot() : float
    + {static} Cross() : float
    + {static} Angle() : float
    + {static} RandomVector() : Vector2Int
}

class Vector3 <<struct>> {
    + x, y, z : float
    
    + magnitude : float <<get>>
    + normalized : Vector3
    
    + zero : Vector3
    + one : Vector3
    + right : Vector3
    + left : Vector3
    + up : Vector3
    + down : Vector3
    + forward : Vector3
    + back : Vector3
    
    + Vector3()
    + Normalize() : void
    
    + {static} Distance() : float
    + {static} Dot() : float
    + {static} Cross() : Vector3
    + {static} Angle() : float
    + {static} RandomVector() : Vector3
}

class Vector3Int <<struct>> {
    + x, y, z : int
    
    + magnitude : float <<get>>
    + normalized :Vector3Int
    
    + zero : Vector3Int
    + one : Vector3Int
    + right : Vector3Int
    + left : Vector3Int
    + up : Vector3Int
    + down : Vector3Int
    + forward : Vector3Int
    + back : Vector3Int
    
    + Vector3Int()
    + Normalize() : void
    
    + {static} Distance() : float
    + {static} Dot() : float
    + {static} Cross() : Vector3Int
    + {static} Angle() : float
    + {static} RandomVector() : Vector3Int
}

class Vector4 <<struct>> {
    + x, y, z, w : float

    + magnitude : float <<get>>
    + normalized :Vector4
    
    + zero : Vector4
    + one : Vector4
    
    + Vector4()
    + Normalize() : void
    
    + {static} RandomVector() : Vector4
}

class Quaternion <<struct>> {
    + x, y, z, w : float
    
    + magnitude : float <<get>>
    + normalized : Quaternion
    + identity : Quaternion
    
    + Quaternion()
    + Normalize() : void
    + ToEuler() : Vector3
    
    + {static} Normalize() : Quaternion
    + {static} Dot() : float
    + {static} FromAxisAngle() : Quaternion
    + {static} FromEuler() : Quaternion
    + {static} ToEuler() : Vector3
    + {static} AngleBetween() : float
}

class Matrix3x3 <<struct>> {
    + m00, m01, m02 : float
    + m10, m11, m12 : float
    + m20, m21, m22 : float
    
    + determinant : float <<get>>
    
    + inverse :Matrix3x3
    + transposed :Matrix3x3
    + zero :Matrix3x3
    + one :Matrix3x3
    + identity :Matrix3x3
    
    + Matrix3x3()
    + GetRow() : Vector3
    + GetColumn() : Vector3
    + Invert() : void
    + Transpose() : void
}

class Matrix4x4 <<struct>> {
    + m00, m01, m02, m03 : float
    + m10, m11, m12, m13 : float
    + m20, m21, m22, m23 : float
    + m30, m31, m32, m33 : float
    
    + determinant : float <<get>>
    
    + inverse : Matrix4x4
    + transposed : Matrix4x4
    + zero : Matrix4x4
    + one : Matrix4x4
    + identity : Matrix4x4
    
    + Matrix4x4()
    + GetRow() : Vector4
    + GetColumn() : Vector4
    + Invert() : void
    + Transpose() : void
    
    + {static} ScaleMatrix() : Matrix4x4
    + {static} TranslateMatrix() : Matrix4x4
    + {static} RotateMatrix() : Matrix4x4
}

class Random <<static>> {
    + {static} Range() : int
    + {static} Range() : float
}

class Math <<static>> {
    + <<const>> epsilon : float
    
    + {static} Deg2Rad : float <<get>>
    + {static} Rad2Deg : float <<get>>
    + {static} Clamp() : float
    + {static} Clamp() : int
    + {static} Clamp01() : float
    + {static} Lerp() : float
    + {static} LerpUnclamped() : float
}

class DirectionalLight {
    + DirectionalLight()
}
Light <|-down- DirectionalLight

class PointLight {
    + range : float <<get>> <<set>>
    + constantAttenuation : float
    + linearAttenuation : float
    + quadraticAttenuation : float
    + PointLight()
}
Light <|-left- PointLight

class LightUtility <<static>> {}
LightUtility o-right-> DirectionalLight
LightUtility o-up-> PointLight

class Light {
    + Light()
    + colour : Colour
}
GameObject <|-- Light
Light --> Colour

class LitMaterial {
    + LitMaterial()
    + <<override>> Initialize() : void
    + AmbientStrength : float <<get>> <<set>>
    + SpecularStrength : float <<get>> <<set>>
    + Shininess : float <<get>> <<set>>
    
    + ObjectColour : Colour
    + DiffuseMap : Texture2D
    + SpecularMap : Texture2D
}
Material <|-- LitMaterial
LitMaterial --> Colour
LitMaterial --> Texture2D

class UnlitMaterial {
    + UnlitMaterial()
    + <<override>> Initialize() : void
    
    + ObjectColour : Colour
    + DiffuseMap : Texture2D
}
Material <|-- UnlitMaterial
UnlitMaterial --> Colour
UnlitMaterial --> Texture2D

@enduml